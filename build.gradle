import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "java"
    id 'maven-publish'
    id 'signing'
    id "org.jetbrains.kotlin.jvm" version "2.1.0"
}

ext {
    Map env = System.getenv()

    getOrDefault = { String key, String defaultValue ->
        String value
        (value = project.findProperty(key)) && !value.isEmpty() ? value : defaultValue
    }

    getEnv = {
        return env
    }

    String mavenCentral_username = project.getOrDefault("ossrhUsername", project.getEnv().CENTRAL_MAVEN_USERNAME)
    String mavenCentral_password = project.getOrDefault("ossrhPassword", project.getEnv().CENTRAL_MAVEN_PASSWORD)

    credentialsMavenCentral = { MavenArtifactRepository mavenArtifactRepository ->
        mavenArtifactRepository.credentials { PasswordCredentials passwordCredentials ->
            username(mavenCentral_username)
            password(mavenCentral_password)
        }
    }
}

repositories {
    maven {
        url 'https://repo1.maven.org/maven2/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/central'
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compileOnly('org.apache.logging.log4j:log4j-core:2.23.1')
    compileOnly('org.slf4j:slf4j-api:2.0.13')

    compileOnly('commons-io:commons-io:2.15.1')

//    dataBase
//    compileOnly('dev.morphia.morphia:morphia-core:2.3.9')
//    compileOnly('de.bwaldvogel:mongo-java-server:1.45.0')
//    compileOnly('de.bwaldvogel:mongo-java-server-h2-backend:1.45.0')
//    compileOnly('org.mongodb:mongodb-driver-sync:4.11.1')
//    compileOnly('org.mongodb:bson:4.11.1')
//    compileOnly('com.h2database:h2:2.2.224')

    implementation('org.lz4:lz4-java:1.8.0')

    // Use Jetbrains Exposed after v1.1.0
    compileOnly("org.jetbrains.exposed:exposed-core:0.57.0")
	compileOnly("org.jetbrains.exposed:exposed-jdbc:0.57.0")
	compileOnly("com.h2database:h2:2.2.224")

    compileOnly("com.google.code.gson:gson:2.10.1")

    // lombok
    compileOnly('org.projectlombok:lombok:1.18.24')
    annotationProcessor('org.projectlombok:lombok:1.18.24')

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 17
	}
}

kotlin {
    jvmToolchain(17)
}

tasks.withType(Javadoc).configureEach { Javadoc task ->
    task.options.encoding("UTF-8")
    (task.options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
}

String versionSuffix = ''
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '+SNAPSHOT'
}

version = project.version + versionSuffix

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "io.github.skydynamic"
            artifactId = "incremental-storage-lib"

            from components.java

            pom {
                name = 'Incremental Storage Lib'
                description = 'IncrementalStorageLib aims to provide a generic incremental backup&restore solution, It utilize mongodb to store file hashes to determine which file has changed'
                url = 'https://github.com/QuickBackupMultiMod-Dev/IncrementalStorageLib'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'skydynamic'
                        name = 'Sky Dynamic'
                        email = 'tcplxw@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/QuickBackupMultiMod-Dev/IncrementalStorageLib.git'
                    developerConnection = 'scm:git:ssh://github.com/QuickBackupMultiMod-Dev/IncrementalStorageLib.git'
                    url = 'https://github.com/QuickBackupMultiMod-Dev/IncrementalStorageLib'
                }
            }
        }
    }

    repositories {
        mavenLocal()

        maven {
            name "CJ-Maven"
            url System.getenv("CJ_MAVEN_URL")
            credentials {
                username System.getenv("CJ_MAVEN_USERNAME")
                password System.getenv("CJ_MAVEN_PASSWORD")
            }
        }

        maven {
            name "mavenCentralRelease"
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            project.credentialsMavenCentral(it)
        }
    }
}

signing {
    String signingKey = base64Decode(project.getOrDefault("secrets.gpg.signingKey", project.getEnv().SIGNING_KEY))
    String signingPassword = project.getOrDefault("secrets.gpg.signingPassword", project.getEnv().SIGNING_PASSWORD)

    required {
        signingKey
    }

    useInMemoryPgpKeys(signingKey, signingPassword ? signingPassword : "")
    sign(publishing.publications)
}

static def base64Decode(encodedString) {
    if (encodedString != null) {
        byte[] decoded = encodedString.decodeBase64()
        String decode = new String(decoded)
        return decode
    }
    return null
}