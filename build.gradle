plugins {
    id "java"
    id 'maven-publish'
    id 'signing'
}

ext {
    Map env = System.getenv()

    getOrDefault = { String key, String defaultValue ->
        String value
        (value = project.findProperty(key)) && !value.isEmpty() ? value : defaultValue
    }

    getEnv = {
        return env
    }

    String mavenCentral_username = project.getOrDefault("ossrhUsername", project.getEnv().CENTRAL_MAVEN_USERNAME)
    String mavenCentral_password = project.getOrDefault("ossrhPassword", project.getEnv().CENTRAL_MAVEN_PASSWORD)

    credentialsMavenCentral = { MavenArtifactRepository mavenArtifactRepository ->
        mavenArtifactRepository.credentials { PasswordCredentials passwordCredentials ->
            username(mavenCentral_username)
            password(mavenCentral_password)
        }
    }
}

repositories {
    maven {
        url 'https://repo1.maven.org/maven2/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/central'
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation('org.apache.logging.log4j:log4j-core:2.23.1')
    implementation('org.slf4j:slf4j-api:2.0.13')

    implementation('commons-io:commons-io:2.15.1')

    // dataBase
    implementation('dev.morphia.morphia:morphia-core:2.3.9')
    implementation('de.bwaldvogel:mongo-java-server:1.45.0')
    implementation('de.bwaldvogel:mongo-java-server-h2-backend:1.45.0')
    implementation('org.mongodb:mongodb-driver-sync:4.11.1')
    implementation('org.mongodb:bson:4.11.1')
    implementation('com.h2database:h2:2.2.224')

    implementation('org.lz4:lz4-java:1.8.0')

    // lombok
    compileOnly('org.projectlombok:lombok:1.18.24')
    annotationProcessor('org.projectlombok:lombok:1.18.24')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach { Javadoc task ->
    task.options.encoding("UTF-8")
    (task.options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
}

String versionSuffix = ''
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '+SNAPSHOT'
}

version = project.version + versionSuffix

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "io.github.skydynamic"
            artifactId = "incremental-storage-lib"

            from components.java
        }
    }

    repositories {
        maven {
            name "CJ-Maven"
            url System.getenv("CJ_MAVEN_URL")
            credentials {
                username System.getenv("CJ_MAVEN_USERNAME")
                password System.getenv("CJ_MAVEN_PASSWORD")
            }
        }

        maven {
            name "NekoMavenRelease"
            url "https://maven.takeneko.icu/releases"
            credentials {
                username project.findProperty("nekoMavenUser") as String ?: System.getenv("NEKO_USERNAME")
                password project.findProperty("nekoMavenPassword") as String ?: System.getenv("NEKO_PASSWORD")
            }
        }

//        申请没过啊啊啊啊啊
//        maven {
//            name "mavenCentralRelease"
//            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//            project.credentialsMavenCentral(it)
//        }
    }
}

signing {
    String signingKey = base64Decode(project.getOrDefault("secrets.gpg.signingKey", project.getEnv().SIGNING_KEY))
    String signingPassword = project.getOrDefault("secrets.gpg.signingPassword", project.getEnv().SIGNING_PASSWORD)

    required {
        signingKey
    }

    useInMemoryPgpKeys(signingKey, signingPassword ? signingPassword : "")
    sign(publishing.publications)
}

static def base64Decode(encodedString) {
    if (encodedString != null) {
        byte[] decoded = encodedString.decodeBase64()
        String decode = new String(decoded)
        return decode
    }
    return null
}